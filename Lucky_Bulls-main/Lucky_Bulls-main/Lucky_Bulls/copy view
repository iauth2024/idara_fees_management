from django.shortcuts import render
# Create your views here.
from django.http import JsonResponse
from dhanhq import dhanhq
from .models import TradingAccount
# prompt: AttributeError at /trading_data/
# 'dhanhq' object has no attribute 'get_holdings_data'

from django.shortcuts import render

from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views.generic import ListView, CreateView, UpdateView, DeleteView
from .models import TradingAccount
from .forms import TradingAccountForm
from django.http import JsonResponse
from django.shortcuts import render
from dhanhq import dhanhq
from .models import TradingAccount
import logging
import requests


# DhanHQ API Wrapper Class
class dhanhq:
    def __init__(self, client_id, access_token, disable_ssl=False, pool=None):
        """
        Initialize the dhanhq class with client ID and access token.

        Args:
            client_id (str): The client ID for the trading account.
            access_token (str): The access token for API authentication.
            disable_ssl (bool): Flag to disable SSL verification.
            pool (dict): Optional connection pool settings.
        """
        self.client_id = str(client_id)
        self.access_token = access_token
        self.base_url = 'https://api.dhan.co/v2'
        self.timeout = 10  # Timeout for API requests
        self.session = requests.Session()
        self.header = {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json',
        }
        if disable_ssl:
            self.session.verify = False

    def _parse_response(self, response):
        """
        Parse the API response and handle errors.

        Args:
            response (requests.Response): The response object.

        Returns:
            dict: Parsed response or error message.
        """
        if response.status_code == 200:
            try:
                return response.json()
            except ValueError as e:
                logging.error('Error parsing JSON response: %s', e)
                return {
                    'status': 'failure',
                    'remarks': 'Invalid JSON response',
                    'data': '',
                }
        else:
            logging.error('API error: %s', response.text)
            return {
                'status': 'failure',
                'remarks': response.text,
                'data': '',
            }
   

# Django View for Trading Data
from django.http import JsonResponse
from django.shortcuts import render
from dhanhq import dhanhq
from .models import TradingAccount
import logging

logging.basicConfig(level=logging.INFO)  # Set logging level to INFO for better visibility

from django.shortcuts import render
import logging



# Configure logging for the view function
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from django.shortcuts import render
from .models import TradingAccount
from .dhanhq import dhanhq  # Assuming you have a function to interact with Dhan API
import logging

# Initialize the logger
logger = logging.getLogger(__name__)

def trading_data_view(request):
    # Check if accounts exist in the database
    if not TradingAccount.objects.exists():
        # Initialize accounts if no data exists in the database
        try:
            TradingAccount.objects.create(
                name="Master Account",
                client_id="master123",
                token="mastertoken",
                is_master=True
            )
            TradingAccount.objects.create(
                name="Child Account 1",
                client_id="child123",
                token="childtoken1",
                is_child=True,
            )
            TradingAccount.objects.create(
                name="Child Account 2",
                client_id="child456",
                token="childtoken2",
                is_child=True,
            )
            logger.info("Accounts initialized successfully.")
        except Exception as e:
            logger.error(f"Error initializing accounts: {e}")
            return render(request, 'error.html', {'error_message': "Error initializing accounts."})

    # Fetch accounts from the database
    accounts = TradingAccount.objects.all()
    if not accounts:
        logger.error("No accounts found in the database.")
        return render(request, 'error.html', {'error_message': "No trading accounts found."})
    
    logger.info("Fetched Accounts:")
    for account in accounts:
        logger.info(f"Name: {account.name}, Client ID: {account.client_id}, Master: {account.is_master}, Child: {account.is_child}")

    master_account = None
    child_accounts_data = []

    # Process each account and fetch data from Dhan API
    for account in accounts:
        dhan_client = dhanhq(account.client_id, account.token)  # Initialize Dhan client
        try:
            if account.is_master:
                master_account = {
                    'name': account.name,
                    'client_id': account.client_id,
                    'holdings': dhan_client.get_holdings(),
                    'positions': dhan_client.get_positions(),
                    'fund_limits': dhan_client.get_fund_limits(),
                    'trade_book': dhan_client.get_order_list(),  # Fetch trade book for the master account
                }
                logger.info(f"Master Account Data: {master_account}")
            elif account.is_child:
                child_account_data = {
                    'name': account.name,
                    'client_id': account.client_id,
                    'holdings': dhan_client.get_holdings(),
                    'positions': dhan_client.get_positions(),
                    'fund_limits': dhan_client.get_fund_limits(),
                    'trade_book': dhan_client.get_order_list(),  # Fetch trade book for child accounts
                }
                child_accounts_data.append(child_account_data)
                logger.info(f"Child Account Data: {child_account_data}")
        except Exception as e:
            logger.error(f"Error processing account {account.name}: {e}")
            continue  # Skip account on error

    # Prepare the context for the template
    context = {
        'master_account': master_account,
        'child_accounts': child_accounts_data,
    }

    return render(request, 'trading_data.html', context)




# Error View for Handling Exceptions
def error_view(request, exception):
    return render(request, 'error.html', {'error_message': str(exception)})

# List all accounts
class TradingAccountListView(ListView):
    model = TradingAccount
    template_name = 'trading_account_list.html'
    context_object_name = 'accounts'

# Add a new account
class TradingAccountCreateView(CreateView):
    model = TradingAccount
    form_class = TradingAccountForm
    template_name = 'trading_account_form.html'
    success_url = reverse_lazy('trading_account_list')

# Edit an account
class TradingAccountUpdateView(UpdateView):
    model = TradingAccount
    form_class = TradingAccountForm
    template_name = 'trading_account_form.html'
    success_url = reverse_lazy('trading_account_list')

# Delete an account
class TradingAccountDeleteView(DeleteView):
    model = TradingAccount
    template_name = 'trading_account_confirm_delete.html'
    success_url = reverse_lazy('trading_account_list')


def index_view(request):
    return render(request, 'index.html')


##############################################################################################################################



import time

# Assuming dhanhq and other necessary imports are available

import time
import logging

# Set up logging configuration
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def calculate_buy_allocation(master_fund, child_accounts, instrument_price, quantity_purchased):
    """Calculate proportional allocation of funds for buying shares."""
    
    # Step 1: Calculate the total amount allocated for the shares in the master account
    total_allocation_master = quantity_purchased * instrument_price  # This is the total amount used for buying the shares in master account
    allocation_percentage_master = total_allocation_master / master_fund  # Allocation percentage in the master account
    
    # Step 2: Allocate the same percentage to the child accounts based on their own funds
    allocations = {'master': total_allocation_master}  # Master account gets the full allocation in monetary terms
    
    for child in child_accounts:
        child_allocation = child['funds'] * allocation_percentage_master  # Allocate funds based on the child account's fund
        allocations[child['client_id']] = child_allocation / instrument_price  # Convert allocated funds to quantity
    
    return allocations

def place_order_for_account(order_details, client_id, quantity, price):
    """Place an order for a specific account."""
    order_details['quantity'] = quantity
    order_details['price'] = price
    try:
        response = dhanhq(client_id).place_order(**order_details)
        logging.info(f"Order placed for account {client_id}: {response}")
    except Exception as e:
        logging.error(f"Error placing order for account {client_id}: {e}")

def copy_buy_order(order_details, master_fund, child_accounts, instrument_price, quantity_purchased):
    """Handles the buy logic by copying orders for the Master and Child accounts."""
    try:
        # Get allocation for master and child accounts
        allocations = calculate_buy_allocation(master_fund, child_accounts, instrument_price, quantity_purchased)
        
        # Ensure required fields exist
        required_fields = ['symbol', 'transactionType', 'price', 'orderType', 'quantity']
        for field in required_fields:
            if field not in order_details:
                raise ValueError(f"Missing required field: {field}")
        
        # Handle Buy Logic for Master Account
        master_qty = int(allocations['master'] * master_fund // instrument_price)  # Master account quantity
        place_order_for_account(order_details, 'master', master_qty, instrument_price)
        
        # Handle Buy Logic for Child Accounts
        for client_id, allocation in allocations.items():
            if client_id != 'master':  # Skip the Master account for child accounts
                child_qty = int(allocation * master_fund // instrument_price)  # Child account quantity
                place_order_for_account(order_details, client_id, child_qty, instrument_price)

    except ValueError as ve:
        logging.error(f"ValueError: {ve}")  # More specific error message for missing fields
    except Exception as e:
        logging.error(f"Error placing buy order: {e}")

def calculate_sell_quantity(holdings, sell_percentage):
    """Calculate how many shares to sell based on holdings and sell percentage."""
    return int(holdings * sell_percentage)

def copy_sell_order(order_details, sell_percentage, master_holdings, child_accounts):
    """Handles the sell logic by copying sell orders for the Master and Child accounts."""
    try:
        # Step 1: Calculate the sell quantity for the master account based on sell percentage
        sell_qty_master = calculate_sell_quantity(master_holdings, sell_percentage)
        logging.info(f"Master account selling: {sell_qty_master} shares")
        
        # Place the sell order for the Master Account
        place_order_for_account(order_details, 'master', sell_qty_master, order_details['price'])
        
        # Step 2: Calculate and place sell orders for Child Accounts
        for child in child_accounts:
            child_holdings = child['holdings']
            sell_qty_child = calculate_sell_quantity(child_holdings, sell_percentage)
            place_order_for_account(order_details, child['client_id'], sell_qty_child, order_details['price'])

    except Exception as e:
        logging.error(f"Error placing sell order: {e}")

def monitor_orders():
    """Monitor changes in the order book and copy orders."""
    while True:
        try:
            orders = main_dhan.get_order_list()  # Fetch orders from the main account
            for order in orders:
                if isinstance(order, dict) and 'status' in order:
                    status = order['status']
                    
                    if status == 'modified':  # Handle modified orders
                        logging.info(f"Order Modified: {order}")
                        for client_id, access_token in other_dhan_accounts:
                            other_dhan = dhanhq(client_id, access_token)  # Connect to other Dhan accounts
                            copy_order(order, 2, other_dhan)  # Apply multiplier of 2 to the order
                    elif status == 'cancelled':  # Handle cancelled orders
                        logging.info(f"Order Cancelled: {order}")
                    elif status == 'placed':  # Handle newly placed orders
                        logging.info(f"Order Placed: {order}")
        
        except Exception as e:
            logging.error(f"An error occurred while monitoring orders: {e}")
        
        time.sleep(5)  # Adjust polling interval as needed

if __name__ == "__main__":
    try:
        monitor_orders()  # Start monitoring orders
    except KeyboardInterrupt:
        logging.info("Monitoring stopped by user.")  # Graceful exit on user interruption


#########################################################################################################################


from django.shortcuts import render
from dhanhq import dhanhq
from .models import TradingAccount

from django.shortcuts import render
from .models import TradingAccount
from dhanhq import dhanhq  # Import your dhan API client

def holdings_table_view(request):
    # Fetch all trading accounts
    accounts = TradingAccount.objects.all()

    # Initialize the holdings data dictionary
    holdings_data = {}

    # Fetch holdings for each account and format the data
    for account in accounts:
        # Create dhan client using the account's credentials
        dhan_client = dhanhq(account.client_id, account.token)
        try:
            # Fetch holdings for the current client
            holdings = dhan_client.get_holdings()
            
            if holdings.get('status') == 'success':
                # Process each holding
                for holding in holdings.get('data', []):
                    # Safely access 'instrument' and 'quantity' fields
                    instrument = holding.get('instrument', 'Unknown Instrument')
                    quantity = holding.get('quantity', 0)

                    # Initialize the dictionary for this instrument if not already done
                    if instrument not in holdings_data:
                        holdings_data[instrument] = {}

                    # Add or update the quantity for this account
                    holdings_data[instrument][account.name] = quantity
            else:
                # Handle errors (e.g., API call failure or invalid response)
                holdings_data['Error'] = {account.name: holdings.get('remarks', 'Unknown Error')}
        
        except Exception as e:
            # Handle exceptions (e.g., API client errors, connectivity issues)
            holdings_data['Error'] = {account.name: str(e)}

    # Context to send to the template
    context = {
        'accounts': accounts,
        'holdings_data': holdings_data,  # Pass formatted holdings data
    }

    # Render the holdings table template
    return render(request, 'holdings_table.html', context)



########################################################################################################################

def get_order_list(self):
        """
        Retrieve a list of all orders requested in a day with their last updated status.

        Returns:
            dict: The response containing order list status and data.
        """
        try:
            url = self.base_url + '/orders'
            response = self.session.get(url, headers=self.header, timeout=self.timeout)
            return self._parse_response(response)
        except Exception as e:
            logging.error('Exception in dhanhq>>get_order_list : %s', e)
            return {
                'status': 'failure',
                'remarks': f'Exception in dhanhq>>get_order_list : {e}',
                'data': '',
            }
def get_positions(self):
        """
        Retrieve a list of all open positions for the day.

        Returns:
            dict: The response containing open positions.
        """
        try:
            url = self.base_url + '/positions'
            response = self.session.get(url, headers=self.header, timeout=self.timeout)
            return self._parse_response(response)
        except Exception as e:
            logging.error('Exception in dhanhq>>get_positions: %s', e)
            return {
                'status': 'failure',
                'remarks': str(e),
                'data': '',
            }

def get_holdings(self):
        """
        Retrieve a list of all holdings.

        Returns:
            dict: The response containing holdings data.
        """
        try:
            url = self.base_url + '/holdings'
            response = self.session.get(url, headers=self.header, timeout=self.timeout)
            return self._parse_response(response)
        except Exception as e:
            logging.error('Exception in dhanhq>>get_holdings: %s', e)
            return {
                'status': 'failure',
                'remarks': str(e),
                'data': '',
            }
